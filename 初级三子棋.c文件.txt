#define _CRT_SECURE_NO_WARNINGS

#include"game.h"


void InitBoard(char board[ROW][COL], int row, int col)//初始数组（棋盘），为空格
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++) {
		for (j = 0; j < col; j++) {
			board[i][j] = ' ';
		}
	}
}

void DisplayBoard(char board[ROW][COL], int row, int col) {//实现打印九宫格图
	int i = 0;
	for (i = 0; i < row; i++) {
		//打印列
		int j = 0;
		for (j = 0; j < col; j++) {
			printf(" %c ", board[i][j]);
			if (j < col - 1) {
				printf("|");
			}
		}
		printf("\n");
		//打印分割行
		if (i < row - 1) {
			for (j = 0; j < col; j++) {
				printf("---");
				if (j < col - 1) {
					printf("|");
				}
			}
			printf("\n");
		}
	}
	//int i = 0;
	//for (i = 0; i < row; i++) {
	//1.打印一行的数据
	//	printf(" %c | %c | %C \n",board[i][0],board[i][1],board[i][2]);
	//2.打印分割线
	//	if (i < row - 1)
	//	printf("---|---|---\n");
	//}
}

void PlayerMove(char board[ROW][COL], int row, int col) {
	int x = 0;
	int y = 0;
	printf("玩家走\n");
	
	while (1) {
		printf("请输入要下的坐标:>\n");
		scanf("%d%d", &x, &y);
		//判断x,y坐标的合法性,这里考虑到，由于大多数普通人不能像程序员一样知道数组的下标是从0开始的
		//因此这里的合法范围是1-3，
		if (x >= 1 && x <= row && y >= 1 && y <= col) {
			//判断下的位置是否已经有元素了
			if (board[x - 1][y - 1] == ' ') {
				board[x - 1][y - 1] = '*';
				break;
			}
			else {
				printf("该坐标被占用\n");
			}
		}
		else {
			printf("坐标非法，请重新输入!\n");
		}

	}
}

void ComputerMove(char board[ROW][COL], int row, int col) {
	int x = 0;
	int y = 0;
	printf("电脑走：>\n");
	while (1) {
		x = rand() % row;//rand是随机数（函数）。rand（）%row得出的结果是行，得出的数始终是0，1，2
		y = rand() % col;
		if (board[x][y] == ' ') {
			board[x][y] = '#';
			break;
		}
	}
}

//返回1，表示棋盘满了
//返回0，表示棋盘没满
int IsFull(char board[ROW][COL], int row, int col) {
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++) {
		for (j = 0; j < col; j++) {
			if (board[i][j] == ' ') {
				return 0;//没满
			}
		}
	}
	return 1;//满了
}
char IsWin(char board[ROW][COL], int row, int col) {
	int i = 0;
	//横三行
	for (i = 0; i < row; i++) {
		if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][1] !=' ') {//判断行是否相等
			return board[i][1];//返回的如果是 * 则人赢，如果返回的是 # 则电脑赢
		}
	}
	//竖三列
	for (i = 0; i < col; i++) {
		if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != ' ') {//判断列是否相等
			return board[1][i];//返回的如果是 * 则人赢，如果返回的是 # 则电脑赢
		}
	}
	//两个对角线
	if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[1][1] != ' ') {
		return board[1][1];
	}
	if (board[2][0] == board[1][1] && board[1][1] == board[0][2] && board[1][1] != ' ') {
		return board[1][1];
	}
	//判断是否平局
	if (1 == IsFull(board, ROW, COL))//判断棋盘是否满了，如果满了，返回'Q'平局
	{
		return 'Q';
	}
	return 'C';
}