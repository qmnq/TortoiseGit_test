#define _CRT_SECURE_NO_WARNINGS

#include"contact_2.h"

void InitContact(struct Contact* ps)
{
	ps->data =(struct Peoinfo*) malloc(DEFAULT_SZ * sizeof(struct PeoInfo));
	if (ps->data == NULL)
	{
		return;
	}
	ps->size = 0;
	ps->capacity = DEFAULT_SZ;
}

static int FindByName(const struct Contact* ps, char name[MAX_NAME])
{
	//遍历
	int i = 0;
	//size 5
	for (i = 0; i < ps->size; i++)
	{
		if (0 == strcmp(ps->data[i].name, name))
		{
			return i;
		}
	}
	return -1;
}

void CheeckCapacity(struct Contact* ps) 
{
	if (ps->size == ps->capacity)
	{
		//满了，增加容量
		struct PeoInfo* ptr = realloc(ps->data, (ps->capacity + 2) * sizeof(struct PeoInfo));
		if (ptr != NULL)
		{
			ps->data = ptr;
			ps->capacity += 2;
			printf("增容成功\n");
		}
		else
		{
			printf("增容失败\n");
		}

	}

}

void AddContact(struct Contact* ps)
{
	//检测当前通讯录的容量
	//1.如果满了，增加空间
	//2.如果不满，啥都不干
	CheeckCapacity(ps);
	//增加数据
		printf("请输入名字：>");
		scanf("%s", ps->data[ps->size].name);
		printf("请输入年龄：>");
		scanf("%d", &(ps->data[ps->size].age));
		printf("请输入姓别：>");
		scanf("%s", ps->data[ps->size].sex);
		printf("请输入电话：>");
		scanf("%s", ps->data[ps->size].tele);
		printf("请输入地址：>");
		scanf("%s", ps->data[ps->size].addr);

		ps->size++;
		printf("添加成功\n");
	}

	//if (ps->size == MAX)//看看是否能够放得下
	//{
	//	printf("通讯录已满，无法增加\n");
	//}
	//else
	//{
	//	printf("请输入名字：>");
	//	scanf("%s", ps->data[ps->size].name);
	//	printf("请输入年龄：>");
	//	scanf("%d", &(ps->data[ps->size].age));
	//	printf("请输入姓别：>");
	//	scanf("%s", ps->data[ps->size].sex);
	//	printf("请输入电话：>");
	//	scanf("%s", ps->data[ps->size].tele);
	//	printf("请输入地址：>");
	//	scanf("%s", ps->data[ps->size].addr);

	//	ps->size++;
	//	printf("添加成功\n");
	//}


void ShowContact(const struct Contact* ps)
{
	if (ps->size == 0)
	{
		printf("通讯录为空格\n");
	}
	else
	{
		int i = 0;
		//标题
		printf("%-20s\t%-4s\t%-5s\t%-12s\t%-20s\n", "名字", "年龄", "姓别", "电话", "地址");
		//数据
		for (i = 0; i < ps->size; i++)
		{
			printf("%-20s\t", ps->data[i].name);
			printf("%-4d\t", ps->data[i].age);
			printf("%-5s\t", ps->data[i].sex);
			printf("%-12s\t", ps->data[i].tele);
			printf("%-20s\n", ps->data[i].addr);
		}
	}
}
void DelContact(struct Contact* ps)
{
	char name[MAX_NAME];
	printf("请输入要删除人的名字：>");
	scanf("%s", name);
	//1.查找要删除的人在什么位置

	//找到了返回名字所在元素的下标
	//找不到返回-1
	int pos = FindByName(ps, name);
	/*有两种情况会跳到这儿来;
			1.找到了对应的名字，break
			2.for循环，循环完了也没找到
	*/
	if (pos == -1)
	{
		printf("要删除的人不存在\n");
	}
	else
	{
		//删除数据（把后面的数据向前挪移）
		int j = 0;
		for (j = pos; j < ps->size - 1; j++)
		{
			ps->data[j] = ps->data[j + 1];
		}
		ps->size--;
		printf("删除成功\n");
	}
	//2.删除
}

void SearchContact(const struct Contact* ps)
{
	char name[MAX_NAME];
	printf("请输入要查找的人的名字：>");
	scanf("%s", name);
	int pos = FindByName(ps, name);
	if (pos == -1)
	{
		printf("查找的人不存在\n");
	}
	else
	{
		//标题
		printf("%-20s\t%-4d\t%-5s\t%-12s\t%-20s\n", "名字", "年龄", "姓别", "电话", "地址");
		//数据	
		printf("%-20s\t%-4d\t%-5s\t%-12s\t%-20s\n",
			ps->data[pos].name,
			ps->data[pos].age,
			ps->data[pos].sex,
			ps->data[pos].tele,
			ps->data[pos].addr);
	}
}

void ModifyContact(struct Contact* ps)
{
	char name[MAX_NAME];
	printf("请输入要修改的人的名字：>");
	scanf("%s", name);
	int pos = FindByName(ps, name);
	if (pos == -1)
	{
		printf("要修改的人不存在\n");
	}
	else
	{
		//与其修改这个人的信息，不如直接将他的信息重新录取一遍
		printf("请输入名字：>");
		scanf("%s", ps->data[pos].name);
		printf("请输入年龄：>");
		scanf("%d", &(ps->data[pos].age));
		printf("请输入姓别：>");
		scanf("%s", ps->data[pos].sex);
		printf("请输入电话：>");
		scanf("%s", ps->data[pos].tele);
		printf("请输入地址：>");
		scanf("%s", ps->data[pos].addr);

		printf("修改完成\n");
	}
}

void DestroyContact(struct Contact* ps)
{
	free(ps->data);
	ps->data = NULL;
}


#define _CRT_SECURE_NO_WARNINGS

#include"contact_2.h"

void InitContact(struct Contact* ps)
{
	ps->data =(struct Peoinfo*) malloc(DEFAULT_SZ * sizeof(struct PeoInfo));
	if (ps->data == NULL)
	{
		return;
	}
	ps->size = 0;
	ps->capacity = DEFAULT_SZ;
}

static int FindByName(const struct Contact* ps, char name[MAX_NAME])
{
	//遍历
	int i = 0;
	//size 5
	for (i = 0; i < ps->size; i++)
	{
		if (0 == strcmp(ps->data[i].name, name))
		{
			return i;
		}
	}
	return -1;
}

void CheeckCapacity(struct Contact* ps) 
{
	if (ps->size == ps->capacity)
	{
		//满了，增加容量
		struct PeoInfo* ptr = realloc(ps->data, (ps->capacity + 2) * sizeof(struct PeoInfo));
		if (ptr != NULL)
		{
			ps->data = ptr;
			ps->capacity += 2;
			printf("增容成功\n");
		}
		else
		{
			printf("增容失败\n");
		}

	}

}

void AddContact(struct Contact* ps)
{
	//检测当前通讯录的容量
	//1.如果满了，增加空间
	//2.如果不满，啥都不干
	CheeckCapacity(ps);
	//增加数据
		printf("请输入名字：>");
		scanf("%s", ps->data[ps->size].name);
		printf("请输入年龄：>");
		scanf("%d", &(ps->data[ps->size].age));
		printf("请输入姓别：>");
		scanf("%s", ps->data[ps->size].sex);
		printf("请输入电话：>");
		scanf("%s", ps->data[ps->size].tele);
		printf("请输入地址：>");
		scanf("%s", ps->data[ps->size].addr);

		ps->size++;
		printf("添加成功\n");
	}

	//if (ps->size == MAX)//看看是否能够放得下
	//{
	//	printf("通讯录已满，无法增加\n");
	//}
	//else
	//{
	//	printf("请输入名字：>");
	//	scanf("%s", ps->data[ps->size].name);
	//	printf("请输入年龄：>");
	//	scanf("%d", &(ps->data[ps->size].age));
	//	printf("请输入姓别：>");
	//	scanf("%s", ps->data[ps->size].sex);
	//	printf("请输入电话：>");
	//	scanf("%s", ps->data[ps->size].tele);
	//	printf("请输入地址：>");
	//	scanf("%s", ps->data[ps->size].addr);

	//	ps->size++;
	//	printf("添加成功\n");
	//}


void ShowContact(const struct Contact* ps)
{
	if (ps->size == 0)
	{
		printf("通讯录为空格\n");
	}
	else
	{
		int i = 0;
		//标题
		printf("%-20s\t%-4s\t%-5s\t%-12s\t%-20s\n", "名字", "年龄", "姓别", "电话", "地址");
		//数据
		for (i = 0; i < ps->size; i++)
		{
			printf("%-20s\t", ps->data[i].name);
			printf("%-4d\t", ps->data[i].age);
			printf("%-5s\t", ps->data[i].sex);
			printf("%-12s\t", ps->data[i].tele);
			printf("%-20s\n", ps->data[i].addr);
		}
	}
}
void DelContact(struct Contact* ps)
{
	char name[MAX_NAME];
	printf("请输入要删除人的名字：>");
	scanf("%s", name);
	//1.查找要删除的人在什么位置

	//找到了返回名字所在元素的下标
	//找不到返回-1
	int pos = FindByName(ps, name);
	/*有两种情况会跳到这儿来;
			1.找到了对应的名字，break
			2.for循环，循环完了也没找到
	*/
	if (pos == -1)
	{
		printf("要删除的人不存在\n");
	}
	else
	{
		//删除数据（把后面的数据向前挪移）
		int j = 0;
		for (j = pos; j < ps->size - 1; j++)
		{
			ps->data[j] = ps->data[j + 1];
		}
		ps->size--;
		printf("删除成功\n");
	}
	//2.删除
}

void SearchContact(const struct Contact* ps)
{
	char name[MAX_NAME];
	printf("请输入要查找的人的名字：>");
	scanf("%s", name);
	int pos = FindByName(ps, name);
	if (pos == -1)
	{
		printf("查找的人不存在\n");
	}
	else
	{
		//标题
		printf("%-20s\t%-4d\t%-5s\t%-12s\t%-20s\n", "名字", "年龄", "姓别", "电话", "地址");
		//数据	
		printf("%-20s\t%-4d\t%-5s\t%-12s\t%-20s\n",
			ps->data[pos].name,
			ps->data[pos].age,
			ps->data[pos].sex,
			ps->data[pos].tele,
			ps->data[pos].addr);
	}
}

void ModifyContact(struct Contact* ps)
{
	char name[MAX_NAME];
	printf("请输入要修改的人的名字：>");
	scanf("%s", name);
	int pos = FindByName(ps, name);
	if (pos == -1)
	{
		printf("要修改的人不存在\n");
	}
	else
	{
		//与其修改这个人的信息，不如直接将他的信息重新录取一遍
		printf("请输入名字：>");
		scanf("%s", ps->data[pos].name);
		printf("请输入年龄：>");
		scanf("%d", &(ps->data[pos].age));
		printf("请输入姓别：>");
		scanf("%s", ps->data[pos].sex);
		printf("请输入电话：>");
		scanf("%s", ps->data[pos].tele);
		printf("请输入地址：>");
		scanf("%s", ps->data[pos].addr);

		printf("修改完成\n");
	}
}

void DestroyContact(struct Contact* ps)
{
	free(ps->data);
	ps->data = NULL;
}


